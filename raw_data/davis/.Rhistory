library(tidyverse)
parse_file <- function(fname, label = "description", normalization = "by_experiment") {
load(fname)
nts <- fit$data$number_of_ts
dt <- tibble()
for (i in 1:nts) {
# observed props
tmp <- as_tibble(fit$data$observed_proportions[[i]])
tmp <- tmp %>% add_column(time = fit$data$observed_times[[i]])
tmp <-
tmp %>% add_column(type = "a) composition", state = "observed")
tmp <-
tmp %>% add_column(
time_series = i,
community = paste(fit$data$pop_names[fit$data$observed_proportions[[i]][1,] > 0], collapse = "-")
)
dt <- bind_rows(dt, tmp)
# predicted props
tmp <- as_tibble(fit$predicted$predicted_proportions[[i]])
tmp <- tmp %>% add_column(time = fit$data$observed_times[[i]])
tmp <-
tmp %>% add_column(type = "a) composition", state = "predicted")
tmp <-
tmp %>% add_column(
time_series = i,
community = paste(fit$data$pop_names[fit$data$observed_proportions[[i]][1,] > 0], collapse = "-")
)
dt <- bind_rows(dt, tmp)
# unobserved abundances
tmp <- as_tibble(fit$data$unobserved_abundances[[i]])
tmp <- tmp %>% add_column(time = fit$data$observed_times[[i]])
tmp <-
tmp %>% add_column(type = "b) abundance", state = "unobserved")
tmp <-
tmp %>% add_column(
time_series = i,
community = paste(fit$data$pop_names[fit$data$unobserved_abundances[[i]][1,] > 0], collapse = "-")
)
dt <- bind_rows(dt, tmp)
# unobserved abundances
tmp <- as_tibble(fit$predicted$predicted_abundances[[i]])
tmp <- tmp %>% add_column(time = fit$data$observed_times[[i]])
tmp <-
tmp %>% add_column(type = "b) abundance", state = "predicted")
tmp <-
tmp %>% add_column(
time_series = i,
community = paste(fit$data$pop_names[fit$data$unobserved_abundances[[i]][1,] > 0], collapse = "-")
)
dt <- bind_rows(dt, tmp)
}
dt <-
dt %>% pivot_longer(
cols = -c(time, type, state, time_series, community),
names_to = "species",
values_to = "x"
) %>% add_column(label = label)
dt <- dt %>% filter(x > 0)
# now split in two: proportions vs abundance
# normalize abundances in one of two ways
# a) single constant
# b) a constant per experiment
dt1 <- dt %>% filter(type == "a) composition")
dt2 <- dt %>% filter(type == "b) abundance")
if (normalization == "by_experiment"){
dt2 <- dt2 %>% group_by(state, time_series) %>% mutate(x = x / mean(x)) %>% ungroup()
} else {
# single constant across experiments
dt2 <- dt2 %>% group_by(state) %>% mutate(x = x / mean(x)) %>% ungroup()
}
dt <- rbind(dt1, dt2)
return(dt)
}
generate_figure <- function(myfiles, mylabels){
dt <- tibble()
for (i in 1:length(myfiles)){
dt <- dt %>% rbind(parse_file(myfiles[i], label = mylabels[i]))
}
pl <- ggplot(dt %>% filter(state != "predicted")) +
aes(
x = time,
y = x,
colour = species,
group = interaction(species, time_series, state)
) +
geom_point() + facet_grid(type ~ paste0(label, " ", community), scales = "free") +
geom_line(data = dt %>% filter(state == "predicted")) +
theme_bw() + ylab("frequency/abundance") +
theme(legend.position = "bottom")
show(pl)
# now print a summary of the correlations
dt %>% filter(type == "b) abundance") %>%
pivot_wider(names_from = state, values_from = x) %>%
group_by(time_series, community, label, species) %>%
summarise(correlation = cor(unobserved, predicted), .groups = "drop") %>% print()
return(list(pl, dt))
}
tmp <- generate_figure(c("../results/lynx_hare_lv/lynx_hare_lv_DIR_GRADIENT_-29.681.RData"),
c(""))
setwd("~/Desktop/ts-prop/figures")
library(tidyverse)
parse_file <- function(fname, label = "description", normalization = "by_experiment") {
load(fname)
nts <- fit$data$number_of_ts
dt <- tibble()
for (i in 1:nts) {
# observed props
tmp <- as_tibble(fit$data$observed_proportions[[i]])
tmp <- tmp %>% add_column(time = fit$data$observed_times[[i]])
tmp <-
tmp %>% add_column(type = "a) composition", state = "observed")
tmp <-
tmp %>% add_column(
time_series = i,
community = paste(fit$data$pop_names[fit$data$observed_proportions[[i]][1,] > 0], collapse = "-")
)
dt <- bind_rows(dt, tmp)
# predicted props
tmp <- as_tibble(fit$predicted$predicted_proportions[[i]])
tmp <- tmp %>% add_column(time = fit$data$observed_times[[i]])
tmp <-
tmp %>% add_column(type = "a) composition", state = "predicted")
tmp <-
tmp %>% add_column(
time_series = i,
community = paste(fit$data$pop_names[fit$data$observed_proportions[[i]][1,] > 0], collapse = "-")
)
dt <- bind_rows(dt, tmp)
# unobserved abundances
tmp <- as_tibble(fit$data$unobserved_abundances[[i]])
tmp <- tmp %>% add_column(time = fit$data$observed_times[[i]])
tmp <-
tmp %>% add_column(type = "b) abundance", state = "unobserved")
tmp <-
tmp %>% add_column(
time_series = i,
community = paste(fit$data$pop_names[fit$data$unobserved_abundances[[i]][1,] > 0], collapse = "-")
)
dt <- bind_rows(dt, tmp)
# unobserved abundances
tmp <- as_tibble(fit$predicted$predicted_abundances[[i]])
tmp <- tmp %>% add_column(time = fit$data$observed_times[[i]])
tmp <-
tmp %>% add_column(type = "b) abundance", state = "predicted")
tmp <-
tmp %>% add_column(
time_series = i,
community = paste(fit$data$pop_names[fit$data$unobserved_abundances[[i]][1,] > 0], collapse = "-")
)
dt <- bind_rows(dt, tmp)
}
dt <-
dt %>% pivot_longer(
cols = -c(time, type, state, time_series, community),
names_to = "species",
values_to = "x"
) %>% add_column(label = label)
dt <- dt %>% filter(x > 0)
# now split in two: proportions vs abundance
# normalize abundances in one of two ways
# a) single constant
# b) a constant per experiment
dt1 <- dt %>% filter(type == "a) composition")
dt2 <- dt %>% filter(type == "b) abundance")
if (normalization == "by_experiment"){
dt2 <- dt2 %>% group_by(state, time_series) %>% mutate(x = x / mean(x)) %>% ungroup()
} else {
# single constant across experiments
dt2 <- dt2 %>% group_by(state) %>% mutate(x = x / mean(x)) %>% ungroup()
}
dt <- rbind(dt1, dt2)
return(dt)
}
generate_figure <- function(myfiles, mylabels){
dt <- tibble()
for (i in 1:length(myfiles)){
dt <- dt %>% rbind(parse_file(myfiles[i], label = mylabels[i]))
}
pl <- ggplot(dt %>% filter(state != "predicted")) +
aes(
x = time,
y = x,
colour = species,
group = interaction(species, time_series, state)
) +
geom_point() + facet_grid(type ~ paste0(label, " ", community), scales = "free") +
geom_line(data = dt %>% filter(state == "predicted")) +
theme_bw() + ylab("frequency/abundance") +
theme(legend.position = "bottom")
show(pl)
# now print a summary of the correlations
dt %>% filter(type == "b) abundance") %>%
pivot_wider(names_from = state, values_from = x) %>%
group_by(time_series, community, label, species) %>%
summarise(correlation = cor(unobserved, predicted), .groups = "drop") %>% print()
return(list(pl, dt))
}
tmp <- generate_figure(c("../results/lynx_hare_lv/lynx_hare_lv_DIR_GRADIENT_-29.681.RData"),
c(""))
library(tidyverse)
library(readxl)
dt <- read_xlsx(path = "Cocultured_data.xlsx", sheet = 1)
setwd("~/Desktop/time_series_prop/raw_data/davis")
library(tidyverse)
library(readxl)
dt <- read_xlsx(path = "Cocultured_data.xlsx", sheet = 1)
dt <- dt %>% select(Time, Experiment, Replicate, Passage, Vibrio, Escherichia, Staphylococcus) %>% drop_na()
dt <- dt %>% mutate(RP = paste0(Replicate, "-", Passage))
dt <- dt %>% pivot_longer(names_to = "Species", values_to = "Fluorescence", cols = -c(Time, Experiment, RP, Replicate, Passage))
dt %>% ggplot(aes(x = Time, y = Fluorescence, group = interaction(RP, Species), colour = Species)) +
geom_point() + geom_line() + facet_wrap(~Experiment)+ scale_y_log10()
dt %>% ggplot(aes(x = Time, y = Fluorescence, group = interaction(RP, Species), colour = Species)) +
geom_point() + geom_line() + facet_wrap(Passage~Experiment)
dt %>% filter(Passage == 1) %>% ggplot(aes(x = Time, y = Fluorescence, group = interaction(RP, Species), colour = Species)) +
geom_point() + geom_line() + facet_wrap(Passage~Experiment) + scale_y_log10()
library(tidyverse)
library(readxl)
dt <- read_xlsx(path = "Cocultured_data.xlsx", sheet = 1)
dt <- dt %>% select(Time, Experiment, Replicate, Passage, Vibrio, Escherichia, Staphylococcus) %>% drop_na()
dt <- dt %>% filter(Passage == 1) %>% filter(Time > 3)
comms <- unique(dt$Experiment)
for (cc in comms){
for (rr in 1:3){
tmp <- dt %>% filter(Experiment == cc, Replicate == rr) %>%
select(Time, Vibrio, Escherichia, Staphylococcus)
write_csv(tmp, file = paste0("../code_v2/data/Davis/", cc, "_", rr, ".csv"))
}
}
setwd("~/Desktop/time_series_prop/raw_data/davis")
dt <- read_xlsx(path = "Cocultured_data.xlsx", sheet = 1)
dt <- dt %>% select(Time, Experiment, Replicate, Passage, Vibrio, Escherichia, Staphylococcus) %>% drop_na()
dt <- dt %>% mutate(RP = paste0(Replicate, "-", Passage))
dt <- dt %>% pivot_longer(names_to = "Species", values_to = "Fluorescence", cols = -c(Time, Experiment, RP, Replicate, Passage))
dt %>% ggplot(aes(x = Time, y = Fluorescence, group = interaction(RP, Species), colour = Species)) +
geom_point() + geom_line() + facet_wrap(~Experiment)+ scale_y_log10()
dt %>% ggplot(aes(x = Time, y = Fluorescence, group = interaction(RP, Species), colour = Species)) +
geom_point() + geom_line() + facet_wrap(Passage~Experiment)
dt %>% filter(Passage == 1) %>% ggplot(aes(x = Time, y = Fluorescence, group = interaction(RP, Species), colour = Species)) +
geom_point() + geom_line() + facet_wrap(Passage~Experiment) + scale_y_log10()
dt
dt <- read_xlsx(path = "Cocultured_data.xlsx", sheet = 1)
dt
